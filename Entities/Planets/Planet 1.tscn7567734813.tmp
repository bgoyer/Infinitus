[gd_scene load_steps=7 format=3 uid="uid://bptcijtpjebdy"]

[ext_resource type="Texture2D" uid="uid://bg1xt0vy83if1" path="res://Images/Texture/Planet/browndwarf-l-rogue.png" id="1_ng0nw"]
[ext_resource type="Texture2D" uid="uid://bfjhw1rkpoe0v" path="res://Images/Normal/Planet/browndwarf-l-rogue_n.png" id="2_e3pw5"]

[sub_resource type="GDScript" id="GDScript_ldejh"]
resource_name = "Orbit"
script/source = "extends Node2D

# Adjust this value to control the orbit speed
@export var ORBIT_LENGTH: float = 15.0
@export var ROTATION_SPEED: float = 100.0
# Our chosen starting angle (45° in radians)
const START_ANGLE: float = PI / 4

# Calculate ellipse parameters so that the planet starts at (9000, 4500)
const A: float = 9000.0 / cos(START_ANGLE)  # ≈ 12728
const B: float = 4500.0 / sin(START_ANGLE)  # ≈ 6364

# A persistent time accumulator
var time_passed: float = 0.0

func _process(delta: float) -> void:
	# Accumulate the elapsed time
	time_passed += delta / ORBIT_LENGTH
	
	# Compute the current angle based on the accumulated time and starting angle
	var angle: float = time_passed + START_ANGLE

	# Calculate the new position on the ellipse
	var pos: Vector2 = Vector2(A * cos(angle), B * sin(angle))
	position = pos
	
	rotate(ROTATION_SPEED * delta / 1000)
"

[sub_resource type="CanvasTexture" id="CanvasTexture_fx7n4"]
diffuse_texture = ExtResource("1_ng0nw")
normal_texture = ExtResource("2_e3pw5")

[sub_resource type="GDScript" id="GDScript_nhki4"]
resource_name = "Gravity"
script/source = "extends Area2D

@export var gravity_strength: float = 100000000.0  # Adjust this to change the force magnitude
@export var gravity_range: float = 0        # This should match or be smaller than your collision shape's size

var bodies_in_range: Array[PhysicsBody2D] = []

func _ready() -> void:
	connect(\"body_entered\", Callable(self, \"_on_body_entered\"))
	connect(\"body_exited\", Callable(self, \"_on_body_exited\"))
	gravity_range = $CollisionShape2D.shape.radius

func _on_body_entered(body: Node) -> void:
	print(body, body is PhysicsBody2D, not self)
	if body is PhysicsBody2D:
		print(\"entered\")
		bodies_in_range.append(body)

func _on_body_exited(body: Node) -> void:
	if body is PhysicsBody2D:
		bodies_in_range.erase(body)

func _physics_process(delta: float) -> void:
	for body in bodies_in_range:
		if body is Ship:
			if body.locked == true:
				print(body.locked)
				return
		var distance: float = global_position.distance_to(body.global_position)
		if distance > 500:
			var direction: Vector2 = (global_position - body.global_position).normalized()
			var force_magnitude: float = gravity_strength / (distance * distance)
			var force: Vector2 = direction * force_magnitude
			print(force)
			body.velocity += force * delta
		else:
			if body is Ship:
				body.velocity *= .95
				if body.velocity.length() < 5:
					body.velocity = (global_position - body.global_position) * 4 * delta
"

[sub_resource type="CircleShape2D" id="CircleShape2D_sao0t"]
radius = 4500.0

[node name="Planet1" type="Node2D"]
script = SubResource("GDScript_ldejh")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = SubResource("CanvasTexture_fx7n4")

[node name="CanvasModulate" type="CanvasModulate" parent="Sprite2D"]
color = Color(0, 0, 0, 1)

[node name="Area2D" type="Area2D" parent="."]
script = SubResource("GDScript_nhki4")

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource("CircleShape2D_sao0t")
